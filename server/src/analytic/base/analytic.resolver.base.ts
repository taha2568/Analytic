/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAnalyticArgs } from "./CreateAnalyticArgs";
import { UpdateAnalyticArgs } from "./UpdateAnalyticArgs";
import { DeleteAnalyticArgs } from "./DeleteAnalyticArgs";
import { AnalyticFindManyArgs } from "./AnalyticFindManyArgs";
import { AnalyticFindUniqueArgs } from "./AnalyticFindUniqueArgs";
import { Analytic } from "./Analytic";
import { AnalyticService } from "../analytic.service";

@graphql.Resolver(() => Analytic)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AnalyticResolverBase {
  constructor(
    protected readonly service: AnalyticService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Analytic",
    action: "read",
    possession: "any",
  })
  async _analyticsMeta(
    @graphql.Args() args: AnalyticFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Analytic])
  @nestAccessControl.UseRoles({
    resource: "Analytic",
    action: "read",
    possession: "any",
  })
  async analytics(
    @graphql.Args() args: AnalyticFindManyArgs
  ): Promise<Analytic[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Analytic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Analytic",
    action: "read",
    possession: "own",
  })
  async analytic(
    @graphql.Args() args: AnalyticFindUniqueArgs
  ): Promise<Analytic | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Analytic)
  @nestAccessControl.UseRoles({
    resource: "Analytic",
    action: "create",
    possession: "any",
  })
  async createAnalytic(
    @graphql.Args() args: CreateAnalyticArgs
  ): Promise<Analytic> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Analytic)
  @nestAccessControl.UseRoles({
    resource: "Analytic",
    action: "update",
    possession: "any",
  })
  async updateAnalytic(
    @graphql.Args() args: UpdateAnalyticArgs
  ): Promise<Analytic | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Analytic)
  @nestAccessControl.UseRoles({
    resource: "Analytic",
    action: "delete",
    possession: "any",
  })
  async deleteAnalytic(
    @graphql.Args() args: DeleteAnalyticArgs
  ): Promise<Analytic | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
